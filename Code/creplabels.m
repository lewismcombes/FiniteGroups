
/* The action of ag=Aut(G) on representations is
     rho . phi = rho of phi
   Magma group actions are on the right.
*/

intrinsic labelCCfaithfulreps(G::LMFDBGrp) -> Any, Any
  { For C-representations, we need the first character for each image to
   give its label.  We separate faithful characters and do those.  For
   the faithful ones, two reps have the same (equiv. conjugate) image 
   iff they differ by an automorphism, so we determine orbits of
   characters under Aut(G), then pick the first.  For nonfaithful ones,
   we return the list of them in the second output.}

  ct:=Get(G, "CCCharacters");
  faith:=<>;
  nonfaith:=<>;
  answer:=AssociativeArray();
  for c in ct do
    if IsFaithful(Get(c, "MagmaChtr")) then Append(~faith, c);
    else Append(~nonfaith, c); end if;
  end for;
  // First, faithful characters 
  orbs:=[];
  if #faith gt 0 then // Don't compute hard stuff if we don't need it
    ag:=Get(G, "MagmaAutGrp");
    f,A,k:=PermutationRepresentation(ag);
    h:=Inverse(f);
    cc:=Get(G, "MagmaConjugacyClasses");
    ct:=Get(G, "MagmaCharacterTable");
    /* Restrict here to smaller list */
    magmafaith:=[Get(c, "MagmaChtr") : c in faith];
    ctvals:=<<c[j]: j in [1..#c]> : c in magmafaith>;
    Sn := Sym(#ctvals);
    cm:=Get(G, "ClassMap");
    gens:=GeneratorsSequence(A);
    subg := sub<Sn| [Sn!auttoperm(h(z), ctvals, cm, cc) : z in gens]>;
    orbs:=Orbits(subg);
    orbs:=[[z : z in y] : y in orbs];
    for j:=1 to #orbs do
      orbs[j]:=Sort(orbs[j]);
      for k:=1 to #orbs[j] do
        answer[Get(faith[orbs[j][k]], "label")]:=Get(faith[orbs[j][1]],"label");
      end for;
    end for;
  end if;

  return answer, nonfaith;
end intrinsic;

intrinsic auttoperm(ha::Any, ctvals::Any, cm::Any, cc::Any)->Any
  {Let ha act on the list of ctvals, returning the permutation as a list
   cm is the class map, ha is h(a) above, cc are the conj. classes}
  n:=#cc;
  return
    [charind(<ctvals[k][cm(ha(cc[z][3]))]: z in [1..n]>, ctvals) : k in [1..#ctvals]];
end intrinsic;

intrinsic charind(c::Any, ct::Any) -> RngIntElt
  { Find the index of c in the list of characters ct 
    ct should be a list of lists to facilitate the equality test.
  }
  for j:=1 to #ct do
    if ct[j] eq c then return j; end if;
  end for;
end intrinsic;

lookup:= function(qvals, faithq);
  for jj:=1 to #faithq do
    achar:=Get(faithq[jj],"MagmaChtr");
    faithqvals := [* achar[j]: j in [1..#achar] *];
    if faithqvals eq qvals then return jj; end if;
  end for;
  return 0;
end function;

intrinsic CCRepLabels(G::LMFDBGrp) -> Any
 {Label all of the complex reps.  The faithful ones are separated to
  avoid a little of duplication of effort as we recurse to quotient
  groups.}
  faith, nofaith:=labelCCfaithfulreps(G);
  cc:=Get(G, "MagmaConjugacyClasses");
  if #nofaith eq 0 then return faith; end if;
  singles:=getsingles();
  for f in nofaith do
    /* Quotient group */
    q,qmap:=quo<Get(Get(f,"Grp"),"MagmaGrp") | Kernel(Get(f,"MagmaChtr"))>;
    qi:=IdentifyGroup(q);
    if qi in Keys(singles) then
      faith[Get(f,"label")]:= singles[qi];
    else
      /* push the character to the quotient */
      lmfdbquo:=MakeSmallGroup(qi[1],qi[2]);
      magquo:= Get(lmfdbquo, "MagmaGrp");
      boo,mapp:=IsIsomorphic(q, magquo);
      qchars:=Get(lmfdbquo, "CCCharacters");
      faithq := labelCCfaithfulreps(lmfdbquo);
      qvals:= [* 0 : z in Get(lmfdbquo, "ConjugacyClasses") *];
      cmquo:=ClassMap(magquo);
      /* Fill in character for quotient */
      for c in [1..#cc] do
        qvals[cmquo(mapp(qmap(cc[c][3])))] := Get(f,"MagmaChtr")[c];
      end for;
      /* Now look it up in chars of quotient */
      jj:=lookup(qvals, qchars);
      assert jj gt 0;
      newlab:= Get(qchars[jj], "label");
      faith[Get(f,"label")] := faithq[newlab];
    end if;
  end for;
  /*
  for ky in Keys(faith) do
    ky,"->",faith[ky];
  end for;
  */
  return faith;
end intrinsic;

/* Groups of order < 102 with only one irred faithful repn */
intrinsic getsingles() -> Any
 {}
 singles:=<<[ 1, 1 ], "1.1.1a">, <[ 2, 1 ], "2.1.1b">, <[ 3, 1 ], "3.1.1b1">, <[ 4, 1 ], "4.1.1c1">, <[ 5, 1 ], "5.1.1b1">, <[ 6, 1 ], "6.1.2a">, <[ 6, 2 ], "6.2.1d1">, <[ 7, 1 ], "7.1.1b1">, <[ 8, 1 ], "8.1.1d1">, <[ 8, 3 ], "8.3.2a">, <[ 8, 4 ], "8.4.2a">, <[ 9, 1 ], "9.1.1c1">, <[ 10, 1 ], "10.1.2a1">, <[ 10, 2 ], "10.2.1d1">, <[ 11, 1 ], "11.1.1b1">, <[ 12, 1 ], "12.1.2b">, <[ 12, 2 ], "12.2.1f1">, <[ 12, 3 ], "12.3.3a">, <[ 12, 4 ], "12.4.2b">, <[ 13, 1 ], "13.1.1b1">, <[ 14, 1 ], "14.1.2a1">, <[ 14, 2 ], "14.2.1d1">, <[ 15, 1 ], "15.1.1d1">, <[ 16, 1 ], "16.1.1e1">, <[ 16, 6 ], "16.6.2a1">, <[ 16, 7 ], "16.7.2b1">, <[ 16, 8 ], "16.8.2b1">, <[ 16, 9 ], "16.9.2b1">, <[ 16, 13 ], "16.13.2a1">, <[ 17, 1 ], "17.1.1b1">, <[ 18, 1 ], "18.1.2b1">, <[ 18, 2 ], "18.2.1f1">, <[ 18, 3 ], "18.3.2b1">, <[ 19, 1 ], "19.1.1b1">, <[ 20, 1 ], "20.1.2b1">, <[ 20, 2 ], "20.2.1f1">, <[ 20, 3 ], "20.3.4a">, <[ 20, 4 ], "20.4.2b1">, <[ 21, 1 ], "21.1.3a1">, <[ 21, 2 ], "21.2.1d1">, <[ 22, 1 ], "22.1.2a1">, <[ 22, 2 ], "22.2.1d1">, <[ 23, 1 ], "23.1.1b1">, <[ 24, 1 ], "24.1.2c1">, <[ 24, 2 ], "24.2.1h1">, <[ 24, 4 ], "24.4.2d1">, <[ 24, 5 ], "24.5.2c1">, <[ 24, 6 ], "24.6.2d1">, <[ 24, 8 ], "24.8.2d1">, <[ 24, 10 ], "24.10.2b1">, <[ 24, 11 ], "24.11.2b1">, <[ 24, 13 ], "24.13.3b">, <[ 25, 1 ], "25.1.1c1">, <[ 26, 1 ], "26.1.2a1">, <[ 26, 2 ], "26.2.1d1">, <[ 27, 1 ], "27.1.1d1">, <[ 27, 3 ], "27.3.3a1">, <[ 27, 4 ], "27.4.3a1">, <[ 28, 1 ], "28.1.2b1">, <[ 28, 2 ], "28.2.1f1">, <[ 28, 3 ], "28.3.2b1">, <[ 29, 1 ], "29.1.1b1">, <[ 30, 1 ], "30.1.2b1">, <[ 30, 2 ], "30.2.2b1">, <[ 30, 3 ], "30.3.2c1">, <[ 30, 4 ], "30.4.1h1">, <[ 31, 1 ], "31.1.1b1">, <[ 32, 1 ], "32.1.1f1">, <[ 32, 6 ], "32.6.4a">, <[ 32, 7 ], "32.7.4a">, <[ 32, 8 ], "32.8.4a">, <[ 32, 11 ], "32.11.2c1">, <[ 32, 15 ], "32.15.2c1">, <[ 32, 17 ], "32.17.2a1">, <[ 32, 18 ], "32.18.2c1">, <[ 32, 19 ], "32.19.2c1">, <[ 32, 20 ], "32.20.2c1">, <[ 32, 38 ], "32.38.2a1">, <[ 32, 42 ], "32.42.2c1">, <[ 32, 43 ], "32.43.4a">, <[ 32, 44 ], "32.44.4a">, <[ 32, 49 ], "32.49.4a">, <[ 32, 50 ], "32.50.4a">, <[ 33, 1 ], "33.1.1d1">, <[ 34, 1 ], "34.1.2a1">, <[ 34, 2 ], "34.2.1d1">, <[ 35, 1 ], "35.1.1d1">, <[ 36, 1 ], "36.1.2d1">, <[ 36, 2 ], "36.2.1i1">, <[ 36, 3 ], "36.3.3b1">, <[ 36, 4 ], "36.4.2d1">, <[ 36, 6 ], "36.6.2d1">, <[ 36, 9 ], "36.9.4a">, <[ 36, 10 ], "36.10.4a">, <[ 36, 11 ], "36.11.3b1">, <[ 36, 12 ], "36.12.2d1">, <[ 37, 1 ], "37.1.1b1">, <[ 38, 1 ], "38.1.2a1">, <[ 38, 2 ], "38.2.1d1">, <[ 39, 1 ], "39.1.3a1">, <[ 39, 2 ], "39.2.1d1">, <[ 40, 1 ], "40.1.2c1">, <[ 40, 2 ], "40.2.1h1">, <[ 40, 3 ], "40.3.4b">, <[ 40, 4 ], "40.4.2d1">, <[ 40, 5 ], "40.5.2c1">, <[ 40, 6 ], "40.6.2d1">, <[ 40, 8 ], "40.8.2d1">, <[ 40, 10 ], "40.10.2b1">, <[ 40, 11 ], "40.11.2b1">, <[ 40, 12 ], "40.12.4b">, <[ 41, 1 ], "41.1.1b1">, <[ 42, 1 ], "42.1.6a">, <[ 42, 2 ], "42.2.3b1">, <[ 42, 3 ], "42.3.2b1">, <[ 42, 4 ], "42.4.2b1">, <[ 42, 5 ], "42.5.2c1">, <[ 42, 6 ], "42.6.1h1">, <[ 43, 1 ], "43.1.1b1">, <[ 44, 1 ], "44.1.2b1">, <[ 44, 2 ], "44.2.1f1">, <[ 44, 3 ], "44.3.2b1">, <[ 45, 1 ], "45.1.1f1">, <[ 46, 1 ], "46.1.2a1">, <[ 46, 2 ], "46.2.1d1">, <[ 47, 1 ], "47.1.1b1">, <[ 48, 1 ], "48.1.2d1">, <[ 48, 2 ], "48.2.1j1">, <[ 48, 3 ], "48.3.3b1">, <[ 48, 4 ], "48.4.2d1">, <[ 48, 5 ], "48.5.2e1">, <[ 48, 6 ], "48.6.2f1">, <[ 48, 7 ], "48.7.2f1">, <[ 48, 8 ], "48.8.2f1">, <[ 48, 10 ], "48.10.2f1">, <[ 48, 15 ], "48.15.4a">, <[ 48, 16 ], "48.16.4a">, <[ 48, 17 ], "48.17.4a">, <[ 48, 18 ], "48.18.4a">, <[ 48, 24 ], "48.24.2b1">, <[ 48, 25 ], "48.25.2d1">, <[ 48, 26 ], "48.26.2d1">, <[ 48, 27 ], "48.27.2d1">, <[ 48, 30 ], "48.30.3c1">, <[ 48, 31 ], "48.31.3c1">, <[ 48, 37 ], "48.37.2f1">, <[ 48, 38 ], "48.38.4a">, <[ 48, 39 ], "48.39.4a">, <[ 48, 40 ], "48.40.4a">, <[ 48, 41 ], "48.41.4a">, <[ 48, 47 ], "48.47.2b1">, <[ 48, 48 ], "48.48.3c">, <[ 49, 1 ], "49.1.1c1">, <[ 50, 1 ], "50.1.2b1">, <[ 50, 2 ], "50.2.1f1">, <[ 50, 3 ], "50.3.2b1">, <[ 51, 1 ], "51.1.1d1">, <[ 52, 1 ], "52.1.2b1">, <[ 52, 2 ], "52.2.1f1">, <[ 52, 3 ], "52.3.4a1">, <[ 52, 4 ], "52.4.2b1">, <[ 53, 1 ], "53.1.1b1">, <[ 54, 1 ], "54.1.2c1">, <[ 54, 2 ], "54.2.1h1">, <[ 54, 3 ], "54.3.2d1">, <[ 54, 4 ], "54.4.2c1">, <[ 54, 5 ], "54.5.6a">, <[ 54, 6 ], "54.6.6a">, <[ 54, 10 ], "54.10.3b1">, <[ 54, 11 ], "54.11.3b1">, <[ 55, 1 ], "55.1.5a1">, <[ 55, 2 ], "55.2.1d1">, <[ 56, 1 ], "56.1.2c1">, <[ 56, 2 ], "56.2.1h1">, <[ 56, 3 ], "56.3.2d1">, <[ 56, 4 ], "56.4.2c1">, <[ 56, 5 ], "56.5.2d1">, <[ 56, 7 ], "56.7.2d1">, <[ 56, 9 ], "56.9.2b1">, <[ 56, 10 ], "56.10.2b1">, <[ 56, 11 ], "56.11.7a">, <[ 57, 1 ], "57.1.3a1">, <[ 57, 2 ], "57.2.1d1">, <[ 58, 1 ], "58.1.2a1">, <[ 58, 2 ], "58.2.1d1">, <[ 59, 1 ], "59.1.1b1">, <[ 60, 1 ], "60.1.2d1">, <[ 60, 2 ], "60.2.2d1">, <[ 60, 3 ], "60.3.2f1">, <[ 60, 4 ], "60.4.1l1">, <[ 60, 6 ], "60.6.4b1">, <[ 60, 7 ], "60.7.4b1">, <[ 60, 8 ], "60.8.4a1">, <[ 60, 9 ], "60.9.3b1">, <[ 60, 10 ], "60.10.2d1">, <[ 60, 11 ], "60.11.2d1">, <[ 60, 12 ], "60.12.2f1">, <[ 61, 1 ], "61.1.1b1">, <[ 62, 1 ], "62.1.2a1">, <[ 62, 2 ], "62.2.1d1">, <[ 63, 2 ], "63.2.1f1">, <[ 63, 3 ], "63.3.3b1">, <[ 64, 1 ], "64.1.1g1">, <[ 64, 18 ], "64.18.4a1">, <[ 64, 19 ], "64.19.4a1">, <[ 64, 25 ], "64.25.4a1">, <[ 64, 28 ], "64.28.4a1">, <[ 64, 30 ], "64.30.4a1">, <[ 64, 31 ], "64.31.2d1">, <[ 64, 32 ], "64.32.4b">, <[ 64, 33 ], "64.33.4b1">, <[ 64, 34 ], "64.34.4b">, <[ 64, 35 ], "64.35.4b1">, <[ 64, 36 ], "64.36.4b1">, <[ 64, 37 ], "64.37.4b">, <[ 64, 40 ], "64.40.2e1">, <[ 64, 41 ], "64.41.4a1">, <[ 64, 42 ], "64.42.4a1">, <[ 64, 43 ], "64.43.4a1">, <[ 64, 45 ], "64.45.2d1">, <[ 64, 46 ], "64.46.4a1">, <[ 64, 49 ], "64.49.2e1">, <[ 64, 51 ], "64.51.2a1">, <[ 64, 52 ], "64.52.2d1">, <[ 64, 53 ], "64.53.2d1">, <[ 64, 54 ], "64.54.2d1">, <[ 64, 91 ], "64.91.4a1">, <[ 64, 94 ], "64.94.4a1">, <[ 64, 102 ], "64.102.4a1">, <[ 64, 111 ], "64.111.4a1">, <[ 64, 124 ], "64.124.2d1">, <[ 64, 125 ], "64.125.4a1">, <[ 64, 134 ], "64.134.4a">, <[ 64, 135 ], "64.135.4a1">, <[ 64, 136 ], "64.136.4a1">, <[ 64, 137 ], "64.137.4a">, <[ 64, 138 ], "64.138.4a">, <[ 64, 139 ], "64.139.4a1">, <[ 64, 152 ], "64.152.4a1">, <[ 64, 153 ], "64.153.4a1">, <[ 64, 154 ], "64.154.4a1">, <[ 64, 185 ], "64.185.2a1">, <[ 64, 189 ], "64.189.2e1">, <[ 64, 190 ], "64.190.4a1">, <[ 64, 191 ], "64.191.4a1">, <[ 64, 249 ], "64.249.4a1">, <[ 64, 256 ], "64.256.4a1">, <[ 64, 257 ], "64.257.4a1">, <[ 64, 258 ], "64.258.4a1">, <[ 64, 259 ], "64.259.4a1">, <[ 64, 266 ], "64.266.4a1">, <[ 65, 1 ], "65.1.1d1">, <[ 66, 1 ], "66.1.2b1">, <[ 66, 2 ], "66.2.2b1">, <[ 66, 3 ], "66.3.2c1">, <[ 66, 4 ], "66.4.1h1">, <[ 67, 1 ], "67.1.1b1">, <[ 68, 1 ], "68.1.2b1">, <[ 68, 2 ], "68.2.1f1">, <[ 68, 3 ], "68.3.4a1">, <[ 68, 4 ], "68.4.2b1">, <[ 69, 1 ], "69.1.1d1">, <[ 70, 1 ], "70.1.2b1">, <[ 70, 2 ], "70.2.2b1">, <[ 70, 3 ], "70.3.2c1">, <[ 70, 4 ], "70.4.1h1">, <[ 71, 1 ], "71.1.1b1">, <[ 72, 1 ], "72.1.2f1">, <[ 72, 2 ], "72.2.1l1">, <[ 72, 3 ], "72.3.2c1">, <[ 72, 4 ], "72.4.2g1">, <[ 72, 5 ], "72.5.2f1">, <[ 72, 6 ], "72.6.2g1">, <[ 72, 8 ], "72.8.2g1">, <[ 72, 10 ], "72.10.2c1">, <[ 72, 11 ], "72.11.2c1">, <[ 72, 12 ], "72.12.2f1">, <[ 72, 15 ], "72.15.6a">, <[ 72, 16 ], "72.16.3d1">, <[ 72, 19 ], "72.19.4c">, <[ 72, 20 ], "72.20.4b">, <[ 72, 21 ], "72.21.4b">, <[ 72, 22 ], "72.22.4b">, <[ 72, 23 ], "72.23.4b">, <[ 72, 24 ], "72.24.4b">, <[ 72, 25 ], "72.25.2c1">, <[ 72, 26 ], "72.26.2h1">, <[ 72, 27 ], "72.27.2f1">, <[ 72, 28 ], "72.28.2h1">, <[ 72, 30 ], "72.30.2h1">, <[ 72, 39 ], "72.39.8a">, <[ 72, 41 ], "72.41.8a">, <[ 72, 43 ], "72.43.6a">, <[ 72, 44 ], "72.44.6a">, <[ 72, 45 ], "72.45.4c">, <[ 72, 46 ], "72.46.4b">, <[ 72, 47 ], "72.47.3d1">, <[ 73, 1 ], "73.1.1b1">, <[ 74, 1 ], "74.1.2a1">, <[ 74, 2 ], "74.2.1d1">, <[ 75, 1 ], "75.1.1f1">, <[ 75, 2 ], "75.2.3a1">, <[ 76, 1 ], "76.1.2b1">, <[ 76, 2 ], "76.2.1f1">, <[ 76, 3 ], "76.3.2b1">, <[ 77, 1 ], "77.1.1d1">, <[ 78, 1 ], "78.1.6a1">, <[ 78, 2 ], "78.2.3b1">, <[ 78, 3 ], "78.3.2b1">, <[ 78, 4 ], "78.4.2b1">, <[ 78, 5 ], "78.5.2c1">, <[ 78, 6 ], "78.6.1h1">, <[ 79, 1 ], "79.1.1b1">, <[ 80, 1 ], "80.1.2d1">, <[ 80, 2 ], "80.2.1j1">, <[ 80, 4 ], "80.4.2d1">, <[ 80, 5 ], "80.5.2e1">, <[ 80, 6 ], "80.6.2f1">, <[ 80, 7 ], "80.7.2f1">, <[ 80, 8 ], "80.8.2f1">, <[ 80, 10 ], "80.10.2f1">, <[ 80, 15 ], "80.15.4a1">, <[ 80, 16 ], "80.16.4a1">, <[ 80, 17 ], "80.17.4a1">, <[ 80, 18 ], "80.18.4a1">, <[ 80, 24 ], "80.24.2b1">, <[ 80, 25 ], "80.25.2d1">, <[ 80, 26 ], "80.26.2d1">, <[ 80, 27 ], "80.27.2d1">, <[ 80, 28 ], "80.28.4c1">, <[ 80, 29 ], "80.29.4c1">, <[ 80, 30 ], "80.30.4c1">, <[ 80, 31 ], "80.31.4c1">, <[ 80, 33 ], "80.33.4c1">, <[ 80, 34 ], "80.34.4c1">, <[ 80, 38 ], "80.38.2f1">, <[ 80, 39 ], "80.39.4a1">, <[ 80, 40 ], "80.40.4a1">, <[ 80, 41 ], "80.41.4a1">, <[ 80, 42 ], "80.42.4a1">, <[ 80, 48 ], "80.48.2b1">, <[ 80, 49 ], "80.49.5a">, <[ 81, 1 ], "81.1.1e1">, <[ 81, 6 ], "81.6.3a1">, <[ 81, 7 ], "81.7.3b1">, <[ 81, 8 ], "81.8.3b1">, <[ 81, 9 ], "81.9.3b1">, <[ 81, 10 ], "81.10.3b1">, <[ 81, 14 ], "81.14.3a1">, <[ 82, 1 ], "82.1.2a1">, <[ 82, 2 ], "82.2.1d1">, <[ 83, 1 ], "83.1.1b1">, <[ 84, 1 ], "84.1.6b">, <[ 84, 2 ], "84.2.3c1">, <[ 84, 3 ], "84.3.2d1">, <[ 84, 4 ], "84.4.2d1">, <[ 84, 5 ], "84.5.2f1">, <[ 84, 6 ], "84.6.1l1">, <[ 84, 7 ], "84.7.6b">, <[ 84, 8 ], "84.8.4a1">, <[ 84, 10 ], "84.10.3b1">, <[ 84, 11 ], "84.11.3c1">, <[ 84, 12 ], "84.12.2d1">, <[ 84, 13 ], "84.13.2d1">, <[ 84, 14 ], "84.14.2f1">, <[ 85, 1 ], "85.1.1d1">, <[ 86, 1 ], "86.1.2a1">, <[ 86, 2 ], "86.2.1d1">, <[ 87, 1 ], "87.1.1d1">, <[ 88, 1 ], "88.1.2c1">, <[ 88, 2 ], "88.2.1h1">, <[ 88, 3 ], "88.3.2d1">, <[ 88, 4 ], "88.4.2c1">, <[ 88, 5 ], "88.5.2d1">, <[ 88, 7 ], "88.7.2d1">, <[ 88, 9 ], "88.9.2b1">, <[ 88, 10 ], "88.10.2b1">, <[ 89, 1 ], "89.1.1b1">, <[ 90, 1 ], "90.1.2d1">, <[ 90, 2 ], "90.2.2c1">, <[ 90, 3 ], "90.3.2e1">, <[ 90, 4 ], "90.4.1l1">, <[ 90, 6 ], "90.6.2d1">, <[ 90, 7 ], "90.7.2f1">, <[ 91, 1 ], "91.1.1d1">, <[ 92, 1 ], "92.1.2b1">, <[ 92, 2 ], "92.2.1f1">, <[ 92, 3 ], "92.3.2b1">, <[ 93, 1 ], "93.1.3a1">, <[ 93, 2 ], "93.2.1d1">, <[ 94, 1 ], "94.1.2a1">, <[ 94, 2 ], "94.2.1d1">, <[ 95, 1 ], "95.1.1d1">, <[ 96, 1 ], "96.1.2e1">, <[ 96, 2 ], "96.2.1l1">, <[ 96, 3 ], "96.3.6a">, <[ 96, 4 ], "96.4.2e1">, <[ 96, 5 ], "96.5.2f1">, <[ 96, 6 ], "96.6.2h1">, <[ 96, 7 ], "96.7.2h1">, <[ 96, 8 ], "96.8.2h1">, <[ 96, 12 ], "96.12.2j1">, <[ 96, 13 ], "96.13.4b1">, <[ 96, 19 ], "96.19.2h1">, <[ 96, 26 ], "96.26.2j1">, <[ 96, 29 ], "96.29.4a1">, <[ 96, 30 ], "96.30.4b1">, <[ 96, 31 ], "96.31.4b1">, <[ 96, 32 ], "96.32.4a1">, <[ 96, 33 ], "96.33.4b1">, <[ 96, 34 ], "96.34.4b1">, <[ 96, 35 ], "96.35.4b1">, <[ 96, 36 ], "96.36.4b1">, <[ 96, 40 ], "96.40.4b1">, <[ 96, 41 ], "96.41.4b1">, <[ 96, 43 ], "96.43.4b1">, <[ 96, 44 ], "96.44.4a1">, <[ 96, 49 ], "96.49.4b1">, <[ 96, 50 ], "96.50.4b1">, <[ 96, 51 ], "96.51.4b1">, <[ 96, 54 ], "96.54.2g1">, <[ 96, 58 ], "96.58.2f1">, <[ 96, 60 ], "96.60.2b1">, <[ 96, 61 ], "96.61.2f1">, <[ 96, 62 ], "96.62.2f1">, <[ 96, 63 ], "96.63.2f1">, <[ 96, 65 ], "96.65.3d1">, <[ 96, 68 ], "96.68.3e1">, <[ 96, 70 ], "96.70.6a">, <[ 96, 71 ], "96.71.6a1">, <[ 96, 72 ], "96.72.6a">, <[ 96, 73 ], "96.73.3d1">, <[ 96, 108 ], "96.108.2h1">, <[ 96, 111 ], "96.111.2j1">, <[ 96, 113 ], "96.113.4a1">, <[ 96, 114 ], "96.114.4a1">, <[ 96, 115 ], "96.115.4b1">, <[ 96, 116 ], "96.116.4b1">, <[ 96, 117 ], "96.117.4b1">, <[ 96, 118 ], "96.118.4c1">, <[ 96, 119 ], "96.119.4b1">, <[ 96, 120 ], "96.120.4b1">, <[ 96, 121 ], "96.121.4c1">, <[ 96, 122 ], "96.122.4c1">, <[ 96, 123 ], "96.123.4b1">, <[ 96, 124 ], "96.124.4b1">, <[ 96, 125 ], "96.125.4c1">, <[ 96, 126 ], "96.126.4b1">, <[ 96, 139 ], "96.139.4b1">, <[ 96, 149 ], "96.149.4b1">, <[ 96, 155 ], "96.155.4a1">, <[ 96, 156 ], "96.156.4b1">, <[ 96, 157 ], "96.157.4a1">, <[ 96, 158 ], "96.158.4b1">, <[ 96, 178 ], "96.178.2b1">, <[ 96, 182 ], "96.182.2f1">, <[ 96, 183 ], "96.183.4b1">, <[ 96, 184 ], "96.184.4b1">, <[ 96, 185 ], "96.185.6a">, <[ 96, 186 ], "96.186.3e1">, <[ 96, 187 ], "96.187.6a">, <[ 96, 195 ], "96.195.6a">, <[ 96, 197 ], "96.197.6a">, <[ 96, 199 ], "96.199.6a">, <[ 96, 203 ], "96.203.6a">, <[ 96, 211 ], "96.211.4b1">, <[ 96, 214 ], "96.214.4b1">, <[ 96, 215 ], "96.215.4a1">, <[ 96, 216 ], "96.216.4b1">, <[ 96, 217 ], "96.217.4b1">, <[ 96, 224 ], "96.224.4b1">, <[ 96, 225 ], "96.225.4b1">, <[ 96, 227 ], "96.227.6a">, <[ 97, 1 ], "97.1.1b1">, <[ 98, 1 ], "98.1.2b1">, <[ 98, 2 ], "98.2.1f1">, <[ 98, 3 ], "98.3.2b1">, <[ 99, 1 ], "99.1.1f1">, <[ 100, 1 ], "100.1.2d1">, <[ 100, 2 ], "100.2.1i1">, <[ 100, 3 ], "100.3.4b1">, <[ 100, 4 ], "100.4.2d1">, <[ 100, 6 ], "100.6.2e1">, <[ 100, 9 ], "100.9.4b1">, <[ 100, 10 ], "100.10.4b1">, <[ 100, 12 ], "100.12.4c1">, <[ 100, 13 ], "100.13.4a1">, <[ 100, 14 ], "100.14.2e1">, <[ 101, 1 ], "101.1.1b1">>;
 a:=AssociativeArray();
 for s in singles do
   a[<s[1][1],s[1][2]>]:=s[2];
 end for;
 return a;
end intrinsic;

